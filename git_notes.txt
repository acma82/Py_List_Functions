I have installed on my Computer (We are working with git course from Updemy).

Command Line               Website
sudo dnf install git       https://git-scm.com/downloads
                           

sudo dnf install g++



Configuration for Editor: git config --global core.editor "code --wait"

------------------------------------------------------------------------------------------------------------------------------------
Git Object Types: 
   Blob:          Git stores files with any extension. It represents a single file in a git file system (no names but number instead)
   Tree:          Git stores directories. It represents directory or folder 
   commit:        Git stores version of our project
   Annotated Tag: 

Blob:
   low level git commands for managing Blob and Tree, such as 
   git hash-object
   git cat-file
   git mktree

   git cat-file -p <hash number> : It shows the contents of the object
   git cat-file -s <hash number> : It shows the size of the object
   git cat-file -t <hash number> : It shows the type of the object


   Hash Types: MD5->120 bit, SHA1->160 bit, SHA256->256 bit, SHA384->384 bit, SHA512->512 bit
   Note: Git uses SHA1

   Git Object: Content + Object Type + Object Length + Delimeter(\0) = Hash (hash number = hash = Hash)
   
   cmd: find .git/objects -type f   -> It displays the hash


Tree:
   It is a representation of directories and file names.

   Git Objects Permissions:
      040000 Directory (Tree)
      100644 Regular non-executable file (Blob)
      100664 Regular non-executable group-writable file
      100755 Regular executable file
      120000 Symbolic link
      160000 Gitlink


--------------------------------------------------------------------------------------------------------------------------------------------
Git -> Working Directory      Staging Area(index)      Git Repository

Commands for using Staging Area
+-------------------------------------------------------------------------------------------------------------------------------------------+
|  Git Commands          |   Description                                                                                                    |
+-------------------------------------------------------------------------------------------------------------------------------------------+
   git ls-files          |   It displays all the files in the staging area
   git read-tree <hash>  |   It displays the tree that correspond to the hash number
   git read-tree 3b95 -t |   It pass the files of the tree to the staging area. 3b folder name and 95 the 2 first number from the hash file
   git |

   git config --global user.name <name>   |
   git config --global user.email <email> |
   git config --list                      |

   Note: The idea is that we can pass files from the repository to the working area using the hash number for the files and tree 
+-------------------------------------------------------------------------------------------------------------------------------------------+




Commands for using Git
+--------------------------------------------------------------------------------------------------+
|  Git Commands         |   Description                                                            |
+--------------------------------------------------------------------------------------------------+
   git --help           |   It displays all the commands available for the git commands
   git mktree --help    |   It displays Tree help
   git init             |   Initialize the git on the folder (Create new Git repository locally)
   git status           |   It shows the status of the files in the repository
                        |
   git add              |   It add a file to be committed (it's added to the index)
   git stage            |   It is the same as git add
   git commit -am "msg" |   It commits all the changes and add the file with a message
                        |   Note: -am will not add new files created because they're not under
                        |         Git control yet.
   git add .            |   It will add everything to git. All changes and all new files
                        |   and folders created.
                        |
   git restore <file>   |   It restores the file, it discard changes in the working file
                        |
                        |
   .gitignore           |   It helps to ignore files and folder that are not desired to be 
                        |   tracked by git. Create a file with the name .gitignore and then
                        |   inside this file type the name of the files and folders that are
                        |   desired to be tracked.
                        |   Note: It needs to be added to git (git add .gitignore).
                        |
   git log              |   It displays the history of changes (commints)
   git checkout         |   It change to a specific commitment or branch

+--------------------------------------------------------------------------------------------------+


GitHud
Py_List_Functions -> Name of the Repository
For all the work                                          For specific work
git config --global user.name "Migue"                     git config user.name "Migue"
git config --global user.email "acma.mex@gmail.com"       git config user.email "acma.mex@gmail.com"
git clone  <path of the url>
git push   -> to push to the repository (provide username and password)



GitLab


